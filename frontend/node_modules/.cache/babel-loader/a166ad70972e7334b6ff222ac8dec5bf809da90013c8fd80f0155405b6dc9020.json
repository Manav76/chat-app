{"ast":null,"code":"var _jsxFileName = \"/Users/surajpurohit/Desktop/chat-app/frontend/src/components/chat/ChatLayout.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Sidebar from './Sidebar';\nimport ChatHeader from './ChatHeader';\nimport ChatWindow from './ChatWindow';\nimport MessageInput from './MessageInput';\nimport { useAuth } from '../../context/AuthContext';\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatLayout = () => {\n  _s();\n  const [sessions, setSessions] = useState([]);\n  const [currentSession, setCurrentSession] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const {\n    getAuthHeader\n  } = useAuth();\n\n  // Fetch chat sessions\n  useEffect(() => {\n    const fetchSessions = async () => {\n      setIsLoading(true);\n      try {\n        // This will be replaced with actual API call\n        // const response = await fetch('http://localhost:8000/chat/sessions', {\n        //   headers: {\n        //     ...getAuthHeader()\n        //   }\n        // });\n        // const data = await response.json();\n        // setSessions(data);\n\n        // For now, use dummy data\n        const dummySessions = [{\n          id: '1',\n          title: 'Chat about React',\n          created_at: '2023-05-15T10:30:00Z'\n        }, {\n          id: '2',\n          title: 'FastAPI Discussion',\n          created_at: '2023-05-14T14:20:00Z'\n        }, {\n          id: '3',\n          title: 'Project Planning',\n          created_at: '2023-05-13T09:15:00Z'\n        }];\n        setSessions(dummySessions);\n      } catch (error) {\n        console.error('Error fetching sessions:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchSessions();\n  }, [getAuthHeader]);\n\n  // Fetch messages for current session\n  useEffect(() => {\n    const fetchMessages = async () => {\n      if (!currentSession) return;\n      setIsLoading(true);\n      try {\n        // This will be replaced with actual API call\n        // const response = await fetch(`http://localhost:8000/chat/sessions/${currentSession.id}/messages`, {\n        //   headers: {\n        //     ...getAuthHeader()\n        //   }\n        // });\n        // const data = await response.json();\n        // setMessages(data);\n\n        // For now, use dummy data\n        const dummyMessages = [{\n          id: '1',\n          role: 'user',\n          content: 'Hello, how can I learn React?',\n          timestamp: '2023-05-15T10:30:00Z'\n        }, {\n          id: '2',\n          role: 'assistant',\n          content: 'React is a JavaScript library for building user interfaces. To get started, I recommend the official React documentation and tutorials.',\n          timestamp: '2023-05-15T10:30:30Z'\n        }, {\n          id: '3',\n          role: 'user',\n          content: 'What about state management?',\n          timestamp: '2023-05-15T10:31:00Z'\n        }, {\n          id: '4',\n          role: 'assistant',\n          content: 'For state management in React, you can use the built-in useState and useContext hooks for simpler applications. For more complex state management, libraries like Redux or Zustand are popular options.',\n          timestamp: '2023-05-15T10:31:30Z'\n        }];\n        setMessages(dummyMessages);\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchMessages();\n  }, [currentSession, getAuthHeader]);\n  const handleSessionSelect = session => {\n    setCurrentSession(session);\n  };\n  const handleNewSession = async () => {\n    // This will be replaced with actual API call\n    // try {\n    //   const response = await fetch('http://localhost:8000/chat/sessions', {\n    //     method: 'POST',\n    //     headers: {\n    //       'Content-Type': 'application/json',\n    //       ...getAuthHeader()\n    //     },\n    //     body: JSON.stringify({ title: 'New Conversation' })\n    //   });\n    //   const newSession = await response.json();\n    //   setSessions([newSession, ...sessions]);\n    //   setCurrentSession(newSession);\n    //   setMessages([]);\n    // } catch (error) {\n    //   console.error('Error creating new session:', error);\n    // }\n\n    // For now, use dummy data\n    const newSession = {\n      id: Date.now().toString(),\n      title: 'New Conversation',\n      created_at: new Date().toISOString()\n    };\n    setSessions([newSession, ...sessions]);\n    setCurrentSession(newSession);\n    setMessages([]);\n  };\n  const handleDeleteSession = async sessionId => {\n    // This will be replaced with actual API call\n    // try {\n    //   await fetch(`http://localhost:8000/chat/sessions/${sessionId}`, {\n    //     method: 'DELETE',\n    //     headers: {\n    //       ...getAuthHeader()\n    //     }\n    //   });\n    //   const updatedSessions = sessions.filter(session => session.id !== sessionId);\n    //   setSessions(updatedSessions);\n    //   if (currentSession && currentSession.id === sessionId) {\n    //     setCurrentSession(null);\n    //     setMessages([]);\n    //   }\n    // } catch (error) {\n    //   console.error('Error deleting session:', error);\n    // }\n\n    // For now, just update state\n    const updatedSessions = sessions.filter(session => session.id !== sessionId);\n    setSessions(updatedSessions);\n    if (currentSession && currentSession.id === sessionId) {\n      setCurrentSession(null);\n      setMessages([]);\n    }\n  };\n  const handleSendMessage = async content => {\n    if (!currentSession) {\n      await handleNewSession();\n    }\n    const userMessage = {\n      id: Date.now().toString(),\n      role: 'user',\n      content,\n      timestamp: new Date().toISOString()\n    };\n    setMessages([...messages, userMessage]);\n\n    // This will be replaced with actual API call\n    // try {\n    //   const response = await fetch(`http://localhost:8000/chat/sessions/${currentSession.id}/messages`, {\n    //     method: 'POST',\n    //     headers: {\n    //       'Content-Type': 'application/json',\n    //       ...getAuthHeader()\n    //     },\n    //     body: JSON.stringify({ content, role: 'user' })\n    //   });\n    //   const data = await response.json();\n    //   // Handle response\n    // } catch (error) {\n    //   console.error('Error sending message:', error);\n    // }\n\n    // Simulate assistant response\n    setTimeout(() => {\n      const assistantMessage = {\n        id: (Date.now() + 1).toString(),\n        role: 'assistant',\n        content: 'This is a simulated response. In the real app, this would come from your backend API.',\n        timestamp: new Date().toISOString()\n      };\n      setMessages(prev => [...prev, assistantMessage]);\n    }, 1000);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-layout\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      sessions: sessions,\n      currentSession: currentSession,\n      onSessionSelect: handleSessionSelect,\n      onNewSession: handleNewSession,\n      onDeleteSession: handleDeleteSession,\n      isLoading: isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-main\",\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        currentSession: currentSession\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatWindow, {\n        messages: messages,\n        currentSession: currentSession,\n        isLoading: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n        onSendMessage: handleSendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatLayout, \"a184Gyt1WqJVLBIHzD/GQ4vt1L4=\", false, function () {\n  return [useAuth];\n});\n_c = ChatLayout;\nexport default ChatLayout;\nvar _c;\n$RefreshReg$(_c, \"ChatLayout\");","map":{"version":3,"names":["React","useState","useEffect","Sidebar","ChatHeader","ChatWindow","MessageInput","useAuth","jsxDEV","_jsxDEV","ChatLayout","_s","sessions","setSessions","currentSession","setCurrentSession","messages","setMessages","isLoading","setIsLoading","getAuthHeader","fetchSessions","dummySessions","id","title","created_at","error","console","fetchMessages","dummyMessages","role","content","timestamp","handleSessionSelect","session","handleNewSession","newSession","Date","now","toString","toISOString","handleDeleteSession","sessionId","updatedSessions","filter","handleSendMessage","userMessage","setTimeout","assistantMessage","prev","className","children","onSessionSelect","onNewSession","onDeleteSession","fileName","_jsxFileName","lineNumber","columnNumber","onSendMessage","_c","$RefreshReg$"],"sources":["/Users/surajpurohit/Desktop/chat-app/frontend/src/components/chat/ChatLayout.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Sidebar from './Sidebar';\nimport ChatHeader from './ChatHeader';\nimport ChatWindow from './ChatWindow';\nimport MessageInput from './MessageInput';\nimport { useAuth } from '../../context/AuthContext';\nimport './Chat.css';\n\nconst ChatLayout = () => {\n  const [sessions, setSessions] = useState([]);\n  const [currentSession, setCurrentSession] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  \n  const { getAuthHeader } = useAuth();\n\n  // Fetch chat sessions\n  useEffect(() => {\n    const fetchSessions = async () => {\n      setIsLoading(true);\n      try {\n        // This will be replaced with actual API call\n        // const response = await fetch('http://localhost:8000/chat/sessions', {\n        //   headers: {\n        //     ...getAuthHeader()\n        //   }\n        // });\n        // const data = await response.json();\n        // setSessions(data);\n        \n        // For now, use dummy data\n        const dummySessions = [\n          { id: '1', title: 'Chat about React', created_at: '2023-05-15T10:30:00Z' },\n          { id: '2', title: 'FastAPI Discussion', created_at: '2023-05-14T14:20:00Z' },\n          { id: '3', title: 'Project Planning', created_at: '2023-05-13T09:15:00Z' }\n        ];\n        setSessions(dummySessions);\n      } catch (error) {\n        console.error('Error fetching sessions:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchSessions();\n  }, [getAuthHeader]);\n\n  // Fetch messages for current session\n  useEffect(() => {\n    const fetchMessages = async () => {\n      if (!currentSession) return;\n      \n      setIsLoading(true);\n      try {\n        // This will be replaced with actual API call\n        // const response = await fetch(`http://localhost:8000/chat/sessions/${currentSession.id}/messages`, {\n        //   headers: {\n        //     ...getAuthHeader()\n        //   }\n        // });\n        // const data = await response.json();\n        // setMessages(data);\n        \n        // For now, use dummy data\n        const dummyMessages = [\n          { id: '1', role: 'user', content: 'Hello, how can I learn React?', timestamp: '2023-05-15T10:30:00Z' },\n          { id: '2', role: 'assistant', content: 'React is a JavaScript library for building user interfaces. To get started, I recommend the official React documentation and tutorials.', timestamp: '2023-05-15T10:30:30Z' },\n          { id: '3', role: 'user', content: 'What about state management?', timestamp: '2023-05-15T10:31:00Z' },\n          { id: '4', role: 'assistant', content: 'For state management in React, you can use the built-in useState and useContext hooks for simpler applications. For more complex state management, libraries like Redux or Zustand are popular options.', timestamp: '2023-05-15T10:31:30Z' }\n        ];\n        setMessages(dummyMessages);\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchMessages();\n  }, [currentSession, getAuthHeader]);\n\n  const handleSessionSelect = (session) => {\n    setCurrentSession(session);\n  };\n\n  const handleNewSession = async () => {\n    // This will be replaced with actual API call\n    // try {\n    //   const response = await fetch('http://localhost:8000/chat/sessions', {\n    //     method: 'POST',\n    //     headers: {\n    //       'Content-Type': 'application/json',\n    //       ...getAuthHeader()\n    //     },\n    //     body: JSON.stringify({ title: 'New Conversation' })\n    //   });\n    //   const newSession = await response.json();\n    //   setSessions([newSession, ...sessions]);\n    //   setCurrentSession(newSession);\n    //   setMessages([]);\n    // } catch (error) {\n    //   console.error('Error creating new session:', error);\n    // }\n    \n    // For now, use dummy data\n    const newSession = {\n      id: Date.now().toString(),\n      title: 'New Conversation',\n      created_at: new Date().toISOString()\n    };\n    setSessions([newSession, ...sessions]);\n    setCurrentSession(newSession);\n    setMessages([]);\n  };\n\n  const handleDeleteSession = async (sessionId) => {\n    // This will be replaced with actual API call\n    // try {\n    //   await fetch(`http://localhost:8000/chat/sessions/${sessionId}`, {\n    //     method: 'DELETE',\n    //     headers: {\n    //       ...getAuthHeader()\n    //     }\n    //   });\n    //   const updatedSessions = sessions.filter(session => session.id !== sessionId);\n    //   setSessions(updatedSessions);\n    //   if (currentSession && currentSession.id === sessionId) {\n    //     setCurrentSession(null);\n    //     setMessages([]);\n    //   }\n    // } catch (error) {\n    //   console.error('Error deleting session:', error);\n    // }\n    \n    // For now, just update state\n    const updatedSessions = sessions.filter(session => session.id !== sessionId);\n    setSessions(updatedSessions);\n    if (currentSession && currentSession.id === sessionId) {\n      setCurrentSession(null);\n      setMessages([]);\n    }\n  };\n\n  const handleSendMessage = async (content) => {\n    if (!currentSession) {\n      await handleNewSession();\n    }\n    \n    const userMessage = {\n      id: Date.now().toString(),\n      role: 'user',\n      content,\n      timestamp: new Date().toISOString()\n    };\n    \n    setMessages([...messages, userMessage]);\n    \n    // This will be replaced with actual API call\n    // try {\n    //   const response = await fetch(`http://localhost:8000/chat/sessions/${currentSession.id}/messages`, {\n    //     method: 'POST',\n    //     headers: {\n    //       'Content-Type': 'application/json',\n    //       ...getAuthHeader()\n    //     },\n    //     body: JSON.stringify({ content, role: 'user' })\n    //   });\n    //   const data = await response.json();\n    //   // Handle response\n    // } catch (error) {\n    //   console.error('Error sending message:', error);\n    // }\n    \n    // Simulate assistant response\n    setTimeout(() => {\n      const assistantMessage = {\n        id: (Date.now() + 1).toString(),\n        role: 'assistant',\n        content: 'This is a simulated response. In the real app, this would come from your backend API.',\n        timestamp: new Date().toISOString()\n      };\n      setMessages(prev => [...prev, assistantMessage]);\n    }, 1000);\n  };\n\n  return (\n    <div className=\"chat-layout\">\n      <Sidebar \n        sessions={sessions} \n        currentSession={currentSession}\n        onSessionSelect={handleSessionSelect}\n        onNewSession={handleNewSession}\n        onDeleteSession={handleDeleteSession}\n        isLoading={isLoading}\n      />\n      <div className=\"chat-main\">\n        <ChatHeader \n          currentSession={currentSession} \n        />\n        <ChatWindow \n          messages={messages} \n          currentSession={currentSession}\n          isLoading={isLoading}\n        />\n        <MessageInput onSendMessage={handleSendMessage} />\n      </div>\n    </div>\n  );\n};\n\nexport default ChatLayout; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}