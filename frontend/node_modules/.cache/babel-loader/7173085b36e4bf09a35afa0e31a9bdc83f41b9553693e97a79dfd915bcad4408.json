{"ast":null,"code":"var _jsxFileName = \"/Users/surajpurohit/Desktop/chat-app/frontend/src/components/chat/ChatLayout.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Sidebar from './Sidebar';\nimport ChatHeader from './ChatHeader';\nimport ChatWindow from './ChatWindow';\nimport MessageInput from './MessageInput';\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatLayout = () => {\n  _s();\n  const [sessions, setSessions] = useState([]);\n  const [currentSession, setCurrentSession] = useState(null);\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    // Fetch chat sessions (will be replaced with API call)\n    const fetchSessions = async () => {\n      // Simulate API response\n      const dummySessions = [{\n        id: '1',\n        title: 'Chat about React',\n        created_at: '2023-05-15T10:30:00Z'\n      }, {\n        id: '2',\n        title: 'FastAPI Discussion',\n        created_at: '2023-05-14T14:20:00Z'\n      }, {\n        id: '3',\n        title: 'Project Planning',\n        created_at: '2023-05-13T09:15:00Z'\n      }];\n      setSessions(dummySessions);\n    };\n    fetchSessions();\n  }, []);\n  useEffect(() => {\n    // Fetch messages for current session (will be replaced with API call)\n    const fetchMessages = async () => {\n      if (!currentSession) return;\n\n      // Simulate API response\n      const dummyMessages = [{\n        id: '1',\n        role: 'user',\n        content: 'Hello, how can I learn React?',\n        timestamp: '2023-05-15T10:30:00Z'\n      }, {\n        id: '2',\n        role: 'assistant',\n        content: 'React is a JavaScript library for building user interfaces. To get started, I recommend the official React documentation and tutorials.',\n        timestamp: '2023-05-15T10:30:30Z'\n      }, {\n        id: '3',\n        role: 'user',\n        content: 'What about state management?',\n        timestamp: '2023-05-15T10:31:00Z'\n      }, {\n        id: '4',\n        role: 'assistant',\n        content: 'For state management in React, you can use the built-in useState and useContext hooks for simpler applications. For more complex state management, libraries like Redux or Zustand are popular options.',\n        timestamp: '2023-05-15T10:31:30Z'\n      }];\n      setMessages(dummyMessages);\n    };\n    fetchMessages();\n  }, [currentSession]);\n  const handleSessionSelect = session => {\n    setCurrentSession(session);\n  };\n  const handleNewSession = () => {\n    const newSession = {\n      id: Date.now().toString(),\n      title: 'New Conversation',\n      created_at: new Date().toISOString()\n    };\n    setSessions([newSession, ...sessions]);\n    setCurrentSession(newSession);\n    setMessages([]);\n  };\n  const handleSendMessage = content => {\n    if (!currentSession) {\n      handleNewSession();\n    }\n    const userMessage = {\n      id: Date.now().toString(),\n      role: 'user',\n      content,\n      timestamp: new Date().toISOString()\n    };\n    setMessages([...messages, userMessage]);\n\n    // Simulate assistant response\n    setTimeout(() => {\n      const assistantMessage = {\n        id: (Date.now() + 1).toString(),\n        role: 'assistant',\n        content: 'This is a simulated response. In the real app, this would come from your backend API.',\n        timestamp: new Date().toISOString()\n      };\n      setMessages(prev => [...prev, assistantMessage]);\n    }, 1000);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-layout\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      sessions: sessions,\n      currentSession: currentSession,\n      onSessionSelect: handleSessionSelect,\n      onNewSession: handleNewSession\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-main\",\n      children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n        currentSession: currentSession\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatWindow, {\n        messages: messages,\n        currentSession: currentSession\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n        onSendMessage: handleSendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatLayout, \"Agarc0PK3ecfZSYg97beOkSPR8k=\");\n_c = ChatLayout;\nexport default ChatLayout;\nvar _c;\n$RefreshReg$(_c, \"ChatLayout\");","map":{"version":3,"names":["React","useState","useEffect","Sidebar","ChatHeader","ChatWindow","MessageInput","jsxDEV","_jsxDEV","ChatLayout","_s","sessions","setSessions","currentSession","setCurrentSession","messages","setMessages","fetchSessions","dummySessions","id","title","created_at","fetchMessages","dummyMessages","role","content","timestamp","handleSessionSelect","session","handleNewSession","newSession","Date","now","toString","toISOString","handleSendMessage","userMessage","setTimeout","assistantMessage","prev","className","children","onSessionSelect","onNewSession","fileName","_jsxFileName","lineNumber","columnNumber","onSendMessage","_c","$RefreshReg$"],"sources":["/Users/surajpurohit/Desktop/chat-app/frontend/src/components/chat/ChatLayout.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Sidebar from './Sidebar';\nimport ChatHeader from './ChatHeader';\nimport ChatWindow from './ChatWindow';\nimport MessageInput from './MessageInput';\nimport './Chat.css';\n\nconst ChatLayout = () => {\n  const [sessions, setSessions] = useState([]);\n  const [currentSession, setCurrentSession] = useState(null);\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    // Fetch chat sessions (will be replaced with API call)\n    const fetchSessions = async () => {\n      // Simulate API response\n      const dummySessions = [\n        { id: '1', title: 'Chat about React', created_at: '2023-05-15T10:30:00Z' },\n        { id: '2', title: 'FastAPI Discussion', created_at: '2023-05-14T14:20:00Z' },\n        { id: '3', title: 'Project Planning', created_at: '2023-05-13T09:15:00Z' }\n      ];\n      setSessions(dummySessions);\n    };\n\n    fetchSessions();\n  }, []);\n\n  useEffect(() => {\n    // Fetch messages for current session (will be replaced with API call)\n    const fetchMessages = async () => {\n      if (!currentSession) return;\n      \n      // Simulate API response\n      const dummyMessages = [\n        { id: '1', role: 'user', content: 'Hello, how can I learn React?', timestamp: '2023-05-15T10:30:00Z' },\n        { id: '2', role: 'assistant', content: 'React is a JavaScript library for building user interfaces. To get started, I recommend the official React documentation and tutorials.', timestamp: '2023-05-15T10:30:30Z' },\n        { id: '3', role: 'user', content: 'What about state management?', timestamp: '2023-05-15T10:31:00Z' },\n        { id: '4', role: 'assistant', content: 'For state management in React, you can use the built-in useState and useContext hooks for simpler applications. For more complex state management, libraries like Redux or Zustand are popular options.', timestamp: '2023-05-15T10:31:30Z' }\n      ];\n      setMessages(dummyMessages);\n    };\n\n    fetchMessages();\n  }, [currentSession]);\n\n  const handleSessionSelect = (session) => {\n    setCurrentSession(session);\n  };\n\n  const handleNewSession = () => {\n    const newSession = {\n      id: Date.now().toString(),\n      title: 'New Conversation',\n      created_at: new Date().toISOString()\n    };\n    setSessions([newSession, ...sessions]);\n    setCurrentSession(newSession);\n    setMessages([]);\n  };\n\n  const handleSendMessage = (content) => {\n    if (!currentSession) {\n      handleNewSession();\n    }\n    \n    const userMessage = {\n      id: Date.now().toString(),\n      role: 'user',\n      content,\n      timestamp: new Date().toISOString()\n    };\n    \n    setMessages([...messages, userMessage]);\n    \n    // Simulate assistant response\n    setTimeout(() => {\n      const assistantMessage = {\n        id: (Date.now() + 1).toString(),\n        role: 'assistant',\n        content: 'This is a simulated response. In the real app, this would come from your backend API.',\n        timestamp: new Date().toISOString()\n      };\n      setMessages(prev => [...prev, assistantMessage]);\n    }, 1000);\n  };\n\n  return (\n    <div className=\"chat-layout\">\n      <Sidebar \n        sessions={sessions} \n        currentSession={currentSession}\n        onSessionSelect={handleSessionSelect}\n        onNewSession={handleNewSession}\n      />\n      <div className=\"chat-main\">\n        <ChatHeader \n          currentSession={currentSession} \n        />\n        <ChatWindow \n          messages={messages} \n          currentSession={currentSession}\n        />\n        <MessageInput onSendMessage={handleSendMessage} />\n      </div>\n    </div>\n  );\n};\n\nexport default ChatLayout; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}